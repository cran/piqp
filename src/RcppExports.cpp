// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "piqp_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_settings
Rcpp::List get_settings(SEXP solver_p, bool dense_backend);
RcppExport SEXP _piqp_get_settings(SEXP solver_pSEXP, SEXP dense_backendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< bool >::type dense_backend(dense_backendSEXP);
    rcpp_result_gen = Rcpp::wrap(get_settings(solver_p, dense_backend));
    return rcpp_result_gen;
END_RCPP
}
// update_settings
void update_settings(SEXP solver_p, bool dense_backend, const Rcpp::List& settings);
RcppExport SEXP _piqp_update_settings(SEXP solver_pSEXP, SEXP dense_backendSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< bool >::type dense_backend(dense_backendSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type settings(settingsSEXP);
    update_settings(solver_p, dense_backend, settings);
    return R_NilValue;
END_RCPP
}
// piqp_dense_setup
SEXP piqp_dense_setup(Eigen::Map<Eigen::MatrixXd> P, Eigen::Map<Eigen::VectorXd> c, Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::VectorXd> b, Eigen::Map<Eigen::MatrixXd> G, Eigen::Map<Eigen::VectorXd> h, Eigen::Map<Eigen::VectorXd> x_lb, Eigen::Map<Eigen::VectorXd> x_ub, Rcpp::List settings);
RcppExport SEXP _piqp_piqp_dense_setup(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_dense_setup(P, c, A, b, G, h, x_lb, x_ub, settings));
    return rcpp_result_gen;
END_RCPP
}
// piqp_sparse_setup
SEXP piqp_sparse_setup(Eigen::Map<Eigen::SparseMatrix<double>> P, Eigen::Map<Eigen::VectorXd> c, Eigen::Map<Eigen::SparseMatrix<double>> A, Eigen::Map<Eigen::VectorXd> b, Eigen::Map<Eigen::SparseMatrix<double>> G, Eigen::Map<Eigen::VectorXd> h, Eigen::Map<Eigen::VectorXd> x_lb, Eigen::Map<Eigen::VectorXd> x_ub, Rcpp::List settings);
RcppExport SEXP _piqp_piqp_sparse_setup(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_sparse_setup(P, c, A, b, G, h, x_lb, x_ub, settings));
    return rcpp_result_gen;
END_RCPP
}
// solve_model
Rcpp::List solve_model(SEXP solver_p, bool dense_backend);
RcppExport SEXP _piqp_solve_model(SEXP solver_pSEXP, SEXP dense_backendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< bool >::type dense_backend(dense_backendSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_model(solver_p, dense_backend));
    return rcpp_result_gen;
END_RCPP
}
// piqp_update_dense
void piqp_update_dense(SEXP solver_p, Rcpp::Nullable<Eigen::Map<Mat>> P, Rcpp::Nullable<Eigen::Map<Vec>> c, Rcpp::Nullable<Eigen::Map<Mat>> A, Rcpp::Nullable<Eigen::Map<Vec>> b, Rcpp::Nullable<Eigen::Map<Mat>> G, Rcpp::Nullable<Eigen::Map<Vec>> h, Rcpp::Nullable<Eigen::Map<Vec>> x_lb, Rcpp::Nullable<Eigen::Map<Vec>> x_ub);
RcppExport SEXP _piqp_piqp_update_dense(SEXP solver_pSEXP, SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Mat>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    piqp_update_dense(solver_p, P, c, A, b, G, h, x_lb, x_ub);
    return R_NilValue;
END_RCPP
}
// piqp_update_sparse
void piqp_update_sparse(SEXP solver_p, Rcpp::Nullable<Eigen::Map<SparseMat>> P, Rcpp::Nullable<Eigen::Map<Vec>> c, Rcpp::Nullable<Eigen::Map<SparseMat>> A, Rcpp::Nullable<Eigen::Map<Vec>> b, Rcpp::Nullable<Eigen::Map<SparseMat>> G, Rcpp::Nullable<Eigen::Map<Vec>> h, Rcpp::Nullable<Eigen::Map<Vec>> x_lb, Rcpp::Nullable<Eigen::Map<Vec>> x_ub);
RcppExport SEXP _piqp_piqp_update_sparse(SEXP solver_pSEXP, SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type solver_p(solver_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<SparseMat>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Eigen::Map<Vec>> >::type x_ub(x_ubSEXP);
    piqp_update_sparse(solver_p, P, c, A, b, G, h, x_lb, x_ub);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_piqp_get_settings", (DL_FUNC) &_piqp_get_settings, 2},
    {"_piqp_update_settings", (DL_FUNC) &_piqp_update_settings, 3},
    {"_piqp_piqp_dense_setup", (DL_FUNC) &_piqp_piqp_dense_setup, 9},
    {"_piqp_piqp_sparse_setup", (DL_FUNC) &_piqp_piqp_sparse_setup, 9},
    {"_piqp_solve_model", (DL_FUNC) &_piqp_solve_model, 2},
    {"_piqp_piqp_update_dense", (DL_FUNC) &_piqp_piqp_update_dense, 9},
    {"_piqp_piqp_update_sparse", (DL_FUNC) &_piqp_piqp_update_sparse, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_piqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
